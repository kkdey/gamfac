PlotAssemblageIdx(fits2[,1])
PlotAssemblageIdx(fits2[,2])
PlotAssemblageIdx(fits2[,3])
PlotAssemblageIdx(fits2[,4])
PlotAssemblageIdx(fits2[,5])
v <- fits2
dim(v)
fits <- matrix(0, dim(X)[1], dim(v)[2])
for(m in 1:dim(X)[1]){
suppressWarnings( out <- cv.gamlr(v[,1:4], X[m,], gamma = 0, family = "binomial"))
fits[m, ] <- c(out$gamlr$beta[,out$seg.min], out$gamlr$alpha[out$seg.min])
}
fits2 <- matrix(0, dim(X)[2], dim(v)[2])
for(m in 1:dim(X)[2]){
suppressWarnings( out <- cv.gamlr(fits[,1:4], X[,m], gamma = 0, family = "binomial"))
fits2[m, ] <- c(out$gamlr$beta[,out$seg.min], out$gamlr$alpha[out$seg.min])
}
PlotAssemblageIdx(fits2[,1])
PlotAssemblageIdx(fits2[,2])
PlotAssemblageIdx(fits2[,3])
PlotAssemblageIdx(fits2[,4])
PlotAssemblageIdx(fits2[,5])
v <- fits2
fits <- matrix(0, dim(X)[1], dim(v)[2])
for(m in 1:dim(X)[1]){
suppressWarnings( out <- cv.gamlr(v[,1:4], X[m,], gamma = 0, family = "binomial"))
fits[m, ] <- c(out$gamlr$beta[,out$seg.min], out$gamlr$alpha[out$seg.min])
}
fits2 <- matrix(0, dim(X)[2], dim(v)[2])
for(m in 1:dim(X)[2]){
suppressWarnings( out <- cv.gamlr(fits[,1:4], X[,m], gamma = 0, family = "binomial"))
fits2[m, ] <- c(out$gamlr$beta[,out$seg.min], out$gamlr$alpha[out$seg.min])
}
PlotAssemblageIdx(fits2[,1])
PlotAssemblageIdx(fits2[,2])
PlotAssemblageIdx(fits2[,3])
PlotAssemblageIdx(fits2[,4])
PlotAssemblageIdx(fits2[,5])
install.packages("distrom")
library(MASS)
data(fgl)
## make your cluster
## FORK is faster but memory heavy, and doesn't work on windows.
cl <- makeCluster(2,type=ifelse(.Platform$OS.type=="unix","FORK","PSOCK"))
print(cl)
library(cluster)
library(MASS)
data(fgl)
## make your cluster
## FORK is faster but memory heavy, and doesn't work on windows.
cl <- makeCluster(2,type=ifelse(.Platform$OS.type=="unix","FORK","PSOCK"))
print(cl)
library(clusterGeneration)
library(MASS)
data(fgl)
## make your cluster
## FORK is faster but memory heavy, and doesn't work on windows.
cl <- makeCluster(2,type=ifelse(.Platform$OS.type=="unix","FORK","PSOCK"))
print(cl)
library(parallel)
library(MASS)
data(fgl)
## make your cluster
## FORK is faster but memory heavy, and doesn't work on windows.
cl <- makeCluster(2,type=ifelse(.Platform$OS.type=="unix","FORK","PSOCK"))
print(cl)
fits <- dmr(cl, fgl[,1:9], fgl$type, verb=1)
library(distrom)
fits <- dmr(cl, fgl[,1:9], fgl$type, verb=1)
fits
fgl[,1:9]
argl <- list()
argl$family <- "binomial"
argl$nlamda = NULL
if(is.null(argl$nlambda))
argl$nlambda <- formals(gamlr)$nlambda
argl$verb <- max(verb-1,0)
verb <- 0
argl <- list()
argl$family <- "binomial"
argl$nlamda = NULL
if(is.null(argl$nlambda))
argl$nlambda <- formals(gamlr)$nlambda
argl$verb <- max(verb-1,0)
C <- dim(X)[1]
chunks <- lapply(1:C,
function(i) X[i,])
chunks
cat("distributed run.\n")
print(cl)
onerun <- function(xj, argl){
argl$y <- xj
fit <- do.call(cv.gamlr,argl)
out <- c(fit$gamlr$beta[,fit$seg.min], fit$gamlr$alpha[fit$seg.min])
return(out)
}
verb <- 0
argl <- list()
argl$family <- "binomial"
argl$nlamda = NULL
argl$x = v[,1:4]
argl$cv = TRUE
if(is.null(argl$nlambda))
argl$nlambda <- formals(gamlr)$nlambda
argl$verb <- max(verb-1,0)
C <- dim(X)[1]
chunks <- lapply(1:C,
function(i) X[i,])
cat("distributed run.\n")
print(cl)
mods <- parLapply(cl,counts,onerun,argl=argl)
mods <- parLapply(cl,chunks,onerun,argl=argl)
mods
h <- do.call(rbind, mods)
h
dim(h)
dim(h)
D <- dim(X)[2]
chunks2 <- lapply(1:D,
function(i) X[,i])
argl2 <- argl
argl2$x <- h[,1:4]
mods <- parLapply(cl,chunks2,onerun,argl=argl2)
v_new <- do.call(rbind, mods)
fits2 <- v_new
PlotAssemblageIdx(fits2[,1])
PlotAssemblageIdx(fits2[,2])
PlotAssemblageIdx(fits2[,3])
PlotAssemblageIdx(fits2[,4])
cl <- makeCluster(10,type=ifelse(.Platform$OS.type=="unix","FORK","PSOCK"))
print(cl)
verb <- 0
argl <- list()
argl$family <- "binomial"
argl$nlamda = NULL
argl$x = v[,1:4]
argl$cv = TRUE
if(is.null(argl$nlambda))
argl$nlambda <- formals(gamlr)$nlambda
argl$verb <- max(verb-1,0)
C <- dim(X)[1]
chunks <- lapply(1:C,
function(i) X[i,])
cat("distributed run.\n")
print(cl)
mods <- parLapply(cl,chunks,onerun,argl=argl)
h <- do.call(rbind, mods)
D <- dim(X)[2]
chunks2 <- lapply(1:D,
function(i) X[,i])
argl2 <- argl
argl2$x <- h[,1:4]
mods <- parLapply(cl,chunks2,onerun,argl=argl2)
v_new <- do.call(rbind, mods)
fits2 <- v_new
v_new
fits2 <- v_new
stopCluster(cl)
PlotAssemblageIdx(fits2[,1])
PlotAssemblageIdx(fits2[,2])
PlotAssemblageIdx(fits2[,3])
PlotAssemblageIdx(fits2[,4])
PlotAssemblageIdx(fits2[,5])
data <- get(load("../data/data.rda"))
X <- t(data$data)
latlong2 <- data$latlong
d <- 8
m <- nrow(X)
n <- ncol(X)
# check for d validity
if(d != as.integer(d)){
stop("d should be integer")
} else if(d < 1){
stop("d should be at least 1")
} else if(d == 1){
return(matrix(1, n, 1))
} else if(d >1){
d <- d-1 #for the svd stuff
}
NA_IND <- is.na(X)
#center the matrix...
mean_X <- rowMeans(X, na.rm=TRUE)
norm_X <- X - mean_X
# ...then 'impute'
norm_X[NA_IND] <- 0
override <- FALSE
adjust <- 15
d_init = 30
mysvd <- trunc.svd(norm_X, d=d_init, adjust=adjust, tol=1e-13, override=override)
rm(norm_X)
D <- diag(mysvd$d, d_init, d_init)
U <- mysvd$u
V <- mysvd$v
rm(mysvd)
# form projection
z <- U %*% D %*% t(V)
z <- z + mean_X
#zmin <- apply(z, 1, min)
#zmax <- apply(z, 1, max)
#ind  <- (zmax<(1-2/n)) & (zmin>(2/n))
#z <- z[ind,]
z1 <- z
zmin <- min(z1)
zmax <- max(z1)
z <- t(apply(z, 1, function(x) return(2/n + (1 - 4/n)*((x - zmin)/(zmax - zmin)))))
z <- log(z/(1-z))
norm_z <- centerscale(z)
v <- trunc.svd(norm_z, d=d, adjust=adjust, tol=1e-13, override=override)$v
v <- cbind(v,1)
onerun <- function(xj, argl){
argl$y <- xj
fit <- do.call(cv.gamlr,argl)
out <- c(fit$gamlr$beta[,fit$seg.min], fit$gamlr$alpha[fit$seg.min])
return(out)
}
cl <- makeCluster(10,type=ifelse(.Platform$OS.type=="unix","FORK","PSOCK"))
print(cl)
NUM_ITER <- 5
for(iter in 1:NUM_ITER){
verb <- 0
argl <- list()
argl$family <- "binomial"
argl$nlamda = NULL
argl$x = v[,1:4]
argl$cv = TRUE
if(is.null(argl$nlambda))
argl$nlambda <- formals(gamlr)$nlambda
argl$verb <- max(verb-1,0)
C <- dim(X)[1]
chunks <- lapply(1:C,
function(i) X[i,])
cat("distributed run.\n")
print(cl)
mods <- parLapply(cl,chunks,onerun,argl=argl)
h <- do.call(rbind, mods)
D <- dim(X)[2]
chunks2 <- lapply(1:D,
function(i) X[,i])
argl2 <- argl
argl2$x <- h[,1:4]
mods <- parLapply(cl,chunks2,onerun,argl=argl2)
v <- do.call(rbind, mods)
cat("we are at iteration,", iter, "\n")
}
stopCluster(cl)
PlotAssemblageIdx(v[,1])
dim(v)
PlotAssemblageIdx(v[,2])
PlotAssemblageIdx(v[,3])
PlotAssemblageIdx(v[,4])
PlotAssemblageIdx(v[,5])
stopifnot( all(X == floor(X)) ) # OK
max_n <- 4
dim(max_n)
(is.integer(max_n))
is.integer(max_n)
max_n
check.integer <- function(N){
!grepl("[^[:digit:]]", format(N,  digits = 20, scientific = FALSE))
}
check.integer(max_n)
check.integer(c(4,5))
check.integer(c(4,5)) == TRUE
if(check.integer(c(4,5)) == TRUE){print("a")}
setwd("~/Documents/lgamfac/test")
data <- get(load("../data/data.rda"))
X <- t(data$data)
latlong2 <- data$latlong
max_n = NULL
numfac = 5
covars = NULL
numfac_init = NULL
override=FALSE
NUM_ITER = 5
if(is.null(max_n)){max_n = max(X)}
stopifnot( all(X == floor(X)) ) # OK
if(length(max_n) == 1){
max_n_out <- matrix(max_n, dim(X)[1], dim(X)[2])
}else{
if(nrow(max_n) != nrow(X) | ncol(max_n) != ncol(X)){
stop("when max_n is a matrix, it must have same dimensions as X")
}
}
Y = max_n_out - X
if(min(Y) < 0){stop("max_n must be greater than all elements of X matrix")}
stopifnot( all(Y == floor(Y)))
###########   checking the covariates    ###################
if(!is.null(covars)){
if(nrow(covars) != ncol(X)){
stop("The first dimension of covariates must be equal to the number of columns of X matrix.")
}
}
if (sum(!complete.cases(covars)) > 0){
stop("no missing values allowed in covariates")
}
if(is.null(numfac_init)){
numfac_init <- numfac + 5
}else{
if(numfac_init < (numfac + 5)) numfac_init <- numfac + 5
}
numfac_init
NA_IND <- is.na(X)
mean_X <- rowMeans(X, na.rm=TRUE)
norm_X <- X - mean_X
norm_X[NA_IND] <- 0
adjust <- 8
#######   SVD (using lfa() functionality)  #################
mysvd <- trunc.svd(norm_X, d=numfac_init, adjust=adjust, tol=1e-13, override=override)
rm(norm_X)
D <- diag(mysvd$d, d, d)
U <- mysvd$u
V <- mysvd$v
rm(mysvd)
# form projection from the first SVD  ##############
z <- U %*% D %*% t(V)
z <- z + mean_X
z <- z/max_n_out
################  projected scores into the [0,1]  interval  ###########
zmin <- min(z)
zmax <- max(z)
z1 <- t(apply(z, 1, function(x) return(2/n + (1 - 4/n)*((x - zmin)/(zmax - zmin)))))
z1 <- log(z1/(1-z1))
norm_z <- centerscale(z1)
adjust <- 8
#######   SVD (using lfa() functionality)  #################
mysvd <- trunc.svd(norm_X, d=numfac_init, adjust=adjust, tol=1e-13, override=override)
rm(norm_X)
D <- diag(mysvd$d, numfac_init, numfac_init)
U <- mysvd$u
V <- mysvd$v
rm(mysvd)
# form projection from the first SVD  ##############
z <- U %*% D %*% t(V)
z <- z + mean_X
z <- z/max_n_out
################  projected scores into the [0,1]  interval  ###########
zmin <- min(z)
zmax <- max(z)
z1 <- t(apply(z, 1, function(x) return(2/n + (1 - 4/n)*((x - zmin)/(zmax - zmin)))))
z1 <- log(z1/(1-z1))
norm_z <- centerscale(z1)
NA_IND <- is.na(X)
mean_X <- rowMeans(X, na.rm=TRUE)
norm_X <- X - mean_X
norm_X[NA_IND] <- 0
adjust <- 8
#######   SVD (using lfa() functionality)  #################
mysvd <- trunc.svd(norm_X, d=numfac_init, adjust=adjust, tol=1e-13, override=override)
rm(norm_X)
D <- diag(mysvd$d, numfac_init, numfac_init)
dim(D)
U <- mysvd$u
dim(U)
V <- mysvd$v
rm(mysvd)
# form projection from the first SVD  ##############
z <- U %*% D %*% t(V)
z <- z + mean_X
z <- z/max_n_out
################  projected scores into the [0,1]  interval  ###########
zmin <- min(z)
zmax <- max(z)
z1 <- t(apply(z, 1, function(x) return(2/n + (1 - 4/n)*((x - zmin)/(zmax - zmin)))))
z1 <- log(z1/(1-z1))
norm_z <- centerscale(z1)
########## Second SVD (from lfa() package)  ######################
v <- trunc.svd(norm_z, d=numfac, adjust=adjust, tol=1e-13, override=override)$v
if(!is.null(covars)){
v <- cbind(v,1)
}else{
v <- cbind(v, 1, covars)
}
dim(v)
iter <- 1
verb <- 0
argl <- list()
argl$family <- "binomial"
argl$x <- v
C <- dim(X)[1]
chunks <- lapply(1:C,
function(i) X[i,])
# cat("distributed run.\n")
#  print(cl)
mods <- parLapply(cl,chunks,onerun,argl=argl)
h <- do.call(rbind, mods)
if(is.null(cl)){
cl <- makeCluster(10,type=ifelse(.Platform$OS.type=="unix","FORK","PSOCK"))
print(cl)
}
verb <- 0
argl <- list()
argl$family <- "binomial"
argl$x <- v
C <- dim(X)[1]
chunks <- lapply(1:C,
function(i) X[i,])
# cat("distributed run.\n")
#  print(cl)
mods <- parLapply(cl,chunks,onerun,argl=argl)
h <- do.call(rbind, mods)
onerun <- function(xj, argl){
argl$y <- xj
fit <- do.call(gamlr::cv.gamlr,argl)
out <- c(fit$gamlr$beta[,fit$seg.min], fit$gamlr$alpha[fit$seg.min])
return(out)
}
cl
verb <- 0
argl <- list()
argl$family <- "binomial"
argl$x <- v
C <- dim(X)[1]
chunks <- lapply(1:C,
function(i) X[i,])
mods <- parLapply(cl,chunks,onerun,argl=argl)
h <- do.call(rbind, mods)
cl
dim(v)
length(chunks)
# cat("distributed run.\n")
#  print(cl)
mods <- parLapply(cl,chunks,onerun,argl=argl)
cl
argl
library(gamlr)
onerun <- function(xj, argl){
argl$y <- xj
fit <- do.call(cv.gamlr,argl)
out <- c(fit$gamlr$beta[,fit$seg.min], fit$gamlr$alpha[fit$seg.min])
return(out)
}
# cat("distributed run.\n")
#  print(cl)
mods <- parLapply(cl,chunks,onerun,argl=argl)
argl$y <- chunks[[1]]
argl
fit <- do.call(cv.gamlr,argl)
out <- c(fit$gamlr$beta[,fit$seg.min], fit$gamlr$alpha[fit$seg.min])
cl <- makeCluster(10,type=ifelse(.Platform$OS.type=="unix","FORK","PSOCK"))
print(cl)
verb <- 0
argl <- list()
argl$family <- "binomial"
argl$x <- v
C <- dim(X)[1]
chunks <- lapply(1:C,
function(i) X[i,])
# cat("distributed run.\n")
#  print(cl)
mods <- parLapply(cl,chunks,onerun,argl=argl)
dim(v)
h <- do.call(rbind, mods)
D <- dim(X)[2]
chunks2 <- lapply(1:D,
function(i) X[,i])
argl2 <- argl
argl2$x <- h[,1:numfac]
mods <- parLapply(cl,chunks2,onerun,argl=argl2)
vnew <- do.call(rbind, mods)
v <- cbind(vnew, 1, covars)
dim(v)
if(!is.null(covars)){
v <- cbind(vnew,1, covars)
}else{
v <- cbind(vnew, 1)
}
v
dim(v)
numfac
v[1:5,]
dim(v)
dim(h)
dim(h)
h[1:5,]
v <- trunc.svd(norm_z, d=numfac, adjust=adjust, tol=1e-13, override=override)$v
###  adding the intercept back
if(!is.null(covars)){
v <- cbind(v,1)
}else{
v <- cbind(v, 1, covars)
}
dim(v)
v[1:5,]
verb <- 0
argl <- list()
argl$family <- "binomial"
argl$x <- v
C <- dim(X)[1]
chunks <- lapply(1:C,
function(i) X[i,])
# cat("distributed run.\n")
#  print(cl)
mods <- parLapply(cl,chunks,onerun,argl=argl)
h <- do.call(rbind, mods)
dim(h)
dim(v)
source('~/Documents/lgamfac/R/lgamfac.R')
source('~/Documents/lgamfac/R/lgamfac.R')
data <- get(load("../data/data.rda"))
X <- t(data$data)
latlong2 <- data$latlong
max_n = NULL
numfac = 5
covars = NULL
numfac_init = NULL
override=FALSE
NUM_ITER = 5
out <- lgamfac(X, numfac = 3)
out <- lgamfac(X, numfac = 3, NUM_ITER = 2)
out$L
out$F
dim(out$F)
